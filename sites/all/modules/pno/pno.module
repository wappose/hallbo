<?php
/**
* Credits to the following pages: 
* Stubs from this page
* http://internetdevels.com/blog/module-with-field-api-drupal-7
* Glue and paint from this page
* http://evolvingweb.ca/story/poutine-maker-introduction-field-api-drupal-7-part-1
* Happy reading.
*/
function pno_field_info() { 
  // Returning array.
  return array( 
    // Which is called pno.
    'pno' => array( 
      // Name of our type will be 'Te(x/s)t field'.
      'label' => t('Person number field'), 
      // Description of our type.
      'description' => t('A simple text field with person number validation'), 
      // Standart widget that will be dispalyed at once.
      // after that we choose field type
      'default_widget' => 'pno_widget',                       
      // Standart that will be dispayed right after we choose field type.
      'default_formatter' => 'pno_formatter', 
      // we add the propert type here to describe the property for the entity api
      'property_type' => 'text', 
    ),
  );
}
   
/**
 * Implements hook_field_widget_info().
 */
function pno_field_widget_info() { 
  // Returning massive.
  return array(  
    // With pno name.
    'pno_widget' => array( 
      // Our widget will be named pno label.
      'label' => t('Person number'), 
      // Our widget will work with a field in DB under the name pno.
      'field types' => array('pno'), 
    ),
  );
}

/**
 * Implements hook_field_formatter_info().
 */
function pno_field_formatter_info() { 
  // Returning array.
  return array(  
    // Name of our format for code.
    'pno_formatter' => array( 
      // Dispalyed name of format.
      'label' => t('Pno text field formatter'), 
      // Field in DB with which our format will work.
      'field types' => array('pno'), 
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function pno_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  // Setting switch into parameters that wll work widget types that are in module.
  //dsm($instance);
  switch ($instance['widget']['type']) { 
    // If parameter case is 'textf'.
    case 'pno_widget': 
      // Then we assign to textf element an array.x
      // With the following values.
      $item =& $items[$delta];
      if(isset($item['pno'])) 
        _pno_sanitize_validate_data($item['pno']);

      $element['pno'] = array( 
        // Element type 'textfield'.
        '#type' => 'textfield', 
        // Heading given in element settings.
        '#title' => $element['#title'], 
        // Widget description is given in element settings.
        '#description' => $element['#description'],
        // Our widget will have standart value textfield.
        '#default_value' => isset($item['pno']) ? $item['pno'] : '',
        // If element is required it will be indicated in settings of the very element.
        '#required' => $element['#required'], 
        // Element location â€“ 
        // If it's indicated, value should be used, if not, value is 0.
        '#weight' => isset($element['#weight']) ? $element['#weight'] : 0,
        // Line that we'll need for the output.
        '#delta' => $delta, 
        '#filters' => array('sanitize_pno'),
      );
    break;
  }
  return $element;
}

/**
* Implementation of hook_fapi_validation_filters
*/
function pno_fapi_validation_filters() {
  return array(
    'sanitize_pno' => array(
      'callback' => 'pno_sanitize_pno_filter',
    ),
  );
}

function pno_sanitize_pno_filter($value) {
  _pno_sanitize_validate_data($value);
  return $value;
}
/**
 * Implements hook_field_is_empty().
 */
function pno_field_is_empty($item, $field) {
  // If there's nothing in $item['textf'].
  if (empty($item['pno'])) {
    // Then we return 1, i.e. we say to Drupal that everything is fine).
    return TRUE; 
    // And if it's empty, nothing will be displayed.
  }
}

function pno_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
  foreach ($items as $delta => $item) {
    if(strlen($item['pno']) > 0) {
      if(!_pno_sanitize_validate_data($item['pno'])) {
        $errors[$field['field_name']][$langcode][$delta][] = array(
          'error' => 'pno_invalid',
          'message' => t('%title is invalid.',
            array('%title' => $instance['label'])
          ),
        );
      }
    }
  }
}

function pno_field_widget_error($element, $error, $form, &$form_state) {
  switch ($error['error']) {
    // Handle the error that was set in pno_field_validate
    case 'pno_invalid':
      form_error($element, $error['message']);
      break;
  }
}


function pno_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  foreach ($items as $delta => $item) {
    $element[$delta] = pno_format_field($item);
  }
  return $element;
}

function pno_format_field($item) {
  $element['pno'] = array(
    'text' => array(
      '#markup' => $item['pno'],
    ),
  );
  return $element;
}

function pno_field_presave($entity_type, $entity, $field, $instance, $langcode, &$items) {
  if ($field['type'] == 'pno') {
    foreach ($items as $delta => $item) {
      if (isset($item['pno'])) {
        _pno_sanitize_validate_data($item['pno']);
        $items[$delta]['pno'] = $item['pno'];
      }
    }
  }
}

function _pno_sanitize_validate_data(&$pno) {
  $pno = preg_replace("/[^0-9]/", '', $pno); //remove non digits
  $ok = false;
  if(strlen($pno) == 10 ) {
    $yy = substr($pno, 0, 2);
    $yyyy = date('Y');
    $cc = substr($yyyy, 0, 2);
    if(($cc * 1000  + $yy) > $yyyy) 
      $cc--;
    $pno = $cc . $pno;
  }
  if(strlen($pno) == 12) {
    $pnr = substr($pno, 2);
    $n = 2;
    for ($i=0; $i<9; $i++) { 
      $tmp = $pnr[$i] * $n; 
      ($tmp > 9) ? $sum += 1 + ($tmp % 10) : $sum += $tmp; ($n == 2) ? $n = 1 : $n = 2; 
    }
    if(($sum + $pnr[9]) % 10 == 0) {
      $pno = preg_replace("/([0-9]{8})([0-9]{4})/", "$1-$2", $pno);
      $ok = true;
    }
  }
  return $ok;
}
