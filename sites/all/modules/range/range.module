<?php

/**
 * @file
 * Defines range field types.
 */

/**
 * Implements hook_field_info().
 */
function range_field_info() {
  $instance_settings = array(
    'min' => '',
    'max' => '',
    'prefix' => '',
    'suffix' => '',
  );
  return array(
    'range_integer' => array(
      'label' => t('Integer range'),
      'description' => t('This field stores a range in the database as an integer.'),
      'instance_settings' => $instance_settings,
      'default_widget' => 'range',
      'default_formatter' => 'range_integer',
    ),
    'range_decimal' => array(
      'label' => t('Decimal range'),
      'description' => t('This field stores a range in the database in a fixed decimal format.'),
      'settings' => array(
        'precision' => 10,
        'scale' => 2,
        'decimal_separator' => '.',
      ),
      'instance_settings' => $instance_settings,
      'default_widget' => 'range',
      'default_formatter' => 'range_decimal',
    ),
    'range_float' => array(
      'label' => t('Float range'),
      'description' => t('This field stores a range in the database in a floating point format.'),
      'settings' => array(
        'decimal_separator' => '.',
      ),
      'instance_settings' => $instance_settings,
      'default_widget' => 'range',
      'default_formatter' => 'range_decimal',
    ),
  );
}

/**
 * Implements hook_field_settings_form().
 */
function range_field_settings_form($field, $instance, $has_data) {
  $settings = $field['settings'];
  $form = array();

  if ($field['type'] == 'range_decimal') {
    $form['precision'] = array(
      '#type' => 'select',
      '#title' => t('Precision'),
      '#options' => drupal_map_assoc(range(10, 32)),
      '#default_value' => $settings['precision'],
      '#description' => t('The total number of digits to store in the database, including those to the right of the decimal.'),
      '#disabled' => $has_data,
    );
    $form['scale'] = array(
      '#type' => 'select',
      '#title' => t('Scale'),
      '#options' => drupal_map_assoc(range(0, 10)),
      '#default_value' => $settings['scale'],
      '#description' => t('The number of digits to the right of the decimal.'),
      '#disabled' => $has_data,
    );
  }
  if ($field['type'] == 'range_decimal' || $field['type'] == 'range_float') {
    $form['decimal_separator'] = array(
      '#type' => 'select',
      '#title' => t('Decimal marker'),
      '#options' => array('.' => t('Decimal point'), ',' => t('Comma')),
      '#default_value' => $settings['decimal_separator'],
      '#description' => t('The character users will input to mark the decimal point in forms.'),
    );
  }

  return $form;
}

/**
 * Implements hook_field_instance_settings_form().
 */
function range_field_instance_settings_form($field, $instance) {
  $settings = $instance['settings'];

  $form['min'] = array(
    '#type' => 'textfield',
    '#title' => t('Minimum'),
    '#default_value' => $settings['min'],
    '#description' => t('The minimum value that should be allowed in this field. Leave blank for no minimum.'),
    '#element_validate' => array('element_validate_number'),
  );
  $form['max'] = array(
    '#type' => 'textfield',
    '#title' => t('Maximum'),
    '#default_value' => $settings['max'],
    '#description' => t('The maximum value that should be allowed in this field. Leave blank for no maximum.'),
    '#element_validate' => array('element_validate_number'),
  );
  $form['prefix'] = array(
    '#type' => 'textfield',
    '#title' => t('Prefix'),
    '#default_value' => $settings['prefix'],
    '#size' => 60,
    '#description' => t("Define a string that should be prefixed to the value, like '$ ' or '&euro; '. Leave blank for none."),
  );
  $form['suffix'] = array(
    '#type' => 'textfield',
    '#title' => t('Suffix'),
    '#default_value' => $settings['suffix'],
    '#size' => 60,
    '#description' => t("Define a string that should be suffixed to the value, like ' m', ' kb/s'. Leave blank for none."),
  );

  return $form;
}

/**
 * Implements hook_field_validate().
 *
 * Possible error codes:
 * - 'range_both_required': Both FROM and TO values must be specified.
 * - 'range_min': The FROM value is less than the allowed minimum value.
 * - 'range_max': The TO value is greater than the allowed maximum value.
 * - 'range_from_greater_than_to': FROM value is greater than TO value.
 */
function range_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
  foreach ($items as $delta => $item) {
    if ($item['from'] !== '' && $item['to'] === '' || $item['from'] === '' && $item['to'] !== '') {
      $errors[$field['field_name']][$langcode][$delta][] = array(
        'error' => 'range_both_required',
        'message' => t('%name: you must specify two values.', array('%name' => $instance['label'])),
      );
    }
    if ($item['from'] != '' && $item['to'] != '') {
      if (is_numeric($instance['settings']['min']) && $item['from'] < $instance['settings']['min']) {
        $errors[$field['field_name']][$langcode][$delta][] = array(
          'error' => 'range_min',
          'message' => t('%name: the FROM value may be no less than %min.', array('%name' => $instance['label'], '%min' => $instance['settings']['min'])),
        );
      }
      if ($item['from'] > $item['to']) {
        $errors[$field['field_name']][$langcode][$delta][] = array(
          'error' => 'range_from_greater_than_to',
          'message' => t('%name: FROM value is greater than TO value.', array('%name' => $instance['label'])),
        );
      }
      if (is_numeric($instance['settings']['max']) && $item['to'] > $instance['settings']['max']) {
        $errors[$field['field_name']][$langcode][$delta][] = array(
          'error' => 'range_max',
          'message' => t('%name: the TO value may be no greater than %max.', array('%name' => $instance['label'], '%max' => $instance['settings']['max'])),
        );
      }
    }
  }
}

/**
 * Implements hook_field_presave().
 */
function range_field_presave($entity_type, $entity, $field, $instance, $langcode, &$items) {
  if ($field['type'] == 'range_decimal') {
    // Let PHP round the value to ensure consistent behavior across storage
    // backends.
    foreach ($items as $delta => $item) {
      if (isset($item['from'])) {
        $items[$delta]['from'] = round($item['from'], $field['settings']['scale']);
      }
      if (isset($item['to'])) {
        $items[$delta]['to'] = round($item['to'], $field['settings']['scale']);
      }
    }
  }
}

/**
 * Implements hook_field_is_empty().
 */
function range_field_is_empty($item, $field) {
  if (empty($item['from']) && (string) $item['from'] !== '0'
          && empty($item['to']) && (string) $item['to'] !== '0') {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implements hook_field_formatter_info().
 */
function range_field_formatter_info() {
  return array(
    // The 'Default' formatter is different for integer fields on the one hand,
    // and for decimal and float fields on the other hand, in order to be able
    // to use different default values for the settings.
    'range_integer' => array(
      'label' => t('Default'),
      'field types' => array('range_integer'),
      'settings' => array(
        'range_separator' => '-',
        'thousand_separator' => ' ',
        // The 'decimal_separator' and 'scale' settings are not configurable
        // through the UI, and will therefore keep their default values. They
        // are only present so that the 'range_integer' and 'range_decimal'
        // formatters can use the same code.
        'decimal_separator' => '.',
        'scale' => 0,
        'prefix_suffix' => TRUE,
      ),
    ),
    'range_decimal' => array(
      'label' => t('Default'),
      'field types' => array('range_decimal', 'range_float'),
      'settings' => array(
        'range_separator' => '-',
        'thousand_separator' => ' ',
        'decimal_separator' => '.',
        'scale' => 2,
        'prefix_suffix' => TRUE,
      ),
    ),
    'range_unformatted' => array(
      'label' => t('Unformatted'),
      'field types' => array('range_integer', 'range_decimal', 'range_float'),
      'settings' => array(
        'range_separator' => '-',
      ),
    ),
  );
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function range_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $element['range_separator'] = array(
    '#type' => 'textfield',
    '#title' => t('Range separator.'),
    '#default_value' => $settings['range_separator'],
  );
  if ($display['type'] == 'range_decimal' || $display['type'] == 'range_integer') {
    $options = array(
      '' => t('<none>'),
      '.' => t('Decimal point'),
      ',' => t('Comma'),
      ' ' => t('Space'),
    );
    $element['thousand_separator'] = array(
      '#type' => 'select',
      '#title' => t('Thousand marker'),
      '#options' => $options,
      '#default_value' => $settings['thousand_separator'],
    );

    if ($display['type'] == 'range_decimal') {
      $element['decimal_separator'] = array(
        '#type' => 'select',
        '#title' => t('Decimal marker'),
        '#options' => array('.' => t('Decimal point'), ',' => t('Comma')),
        '#default_value' => $settings['decimal_separator'],
      );
      $element['scale'] = array(
        '#type' => 'select',
        '#title' => t('Scale'),
        '#options' => drupal_map_assoc(range(0, 10)),
        '#default_value' => $settings['scale'],
        '#description' => t('The number of digits to the right of the decimal.'),
      );
    }

    $element['prefix_suffix'] = array(
      '#type' => 'checkbox',
      '#title' => t('Display prefix and suffix.'),
      '#default_value' => $settings['prefix_suffix'],
    );
  }

  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function range_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $summary = array();
  if ($display['type'] == 'range_decimal' || $display['type'] == 'range_integer') {
    $from = number_format(1234.1234567890, $settings['scale'], $settings['decimal_separator'], $settings['thousand_separator']);
    $to = number_format(4321.0987654321, $settings['scale'], $settings['decimal_separator'], $settings['thousand_separator']);
    $summary[] = $from . $settings['range_separator'] . $to;
    if ($settings['prefix_suffix']) {
      $summary[] = t('Display with prefix and suffix.');
    }
  }

  return implode('<br />', $summary);
}

/**
 * Implements hook_field_formatter_view().
 */
function range_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  $settings = $display['settings'];

  switch ($display['type']) {
    case 'range_integer':
    case 'range_decimal':
      foreach ($items as $delta => $item) {
        $from = number_format($item['from'], $settings['scale'], $settings['decimal_separator'], $settings['thousand_separator']);
        $to = number_format($item['to'], $settings['scale'], $settings['decimal_separator'], $settings['thousand_separator']);
        $output = $from . $settings['range_separator'] . $to;
        if ($settings['prefix_suffix']) {
          $prefix = isset($instance['settings']['prefix']) ? field_filter_xss($instance['settings']['prefix']) : '';
          $suffix = isset($instance['settings']['suffix']) ? field_filter_xss($instance['settings']['suffix']) : '';
          $output = $prefix . $output . $suffix;
        }
        $element[$delta] = array('#markup' => $output);
      }
      break;

    case 'range_unformatted':
      foreach ($items as $delta => $item) {
        $element[$delta] = array('#markup' => $item['from'] . $settings['range_separator'] . $item['to']);
      }
      break;
  }

  return $element;
}

/**
 * Implements hook_field_widget_info().
 */
function range_field_widget_info() {
  return array(
    'range' => array(
      'label' => t('Text fields'),
      'field types' => array('range_integer', 'range_decimal', 'range_float'),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function range_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $from = isset($items[$delta]['from']) ? $items[$delta]['from'] : '';
  $to = isset($items[$delta]['to']) ? $items[$delta]['to'] : '';
  // Substitute the decimal separator.
  if ($field['type'] == 'range_decimal' || $field['type'] == 'range_float') {
    $from = strtr($from, '.', $field['settings']['decimal_separator']);
    $to = strtr($to, '.', $field['settings']['decimal_separator']);
  }

  // Wrap in a fieldset for single field.
  if ($field['cardinality'] == 1) {
    $element['#type'] = 'fieldset';
  }

  $element += array(
    // Extract the number type from the field type name for easier validation.
    '#range_type' => str_replace('range_', '', $field['type']),
  );

  $base = array(
    '#type' => 'textfield',
    // Allow a slightly larger size that the field length to allow for some
    // configurations where all characters won't fit in input field.
    '#size' => $field['type'] == 'range_decimal' ? $field['settings']['precision'] + 4 : 12,
    // Allow two extra characters for signed values and decimal separator.
    '#maxlength' => $field['type'] == 'range_decimal' ? $field['settings']['precision'] + 2 : 10,
    '#required' => $element['#required'],
  );

  $element['from'] = array(
    '#title' => t('From'),
    '#default_value' => $from,
    '#prefix' => '<div class="field-values-wrapper clearfix">',
  ) + $base;

  $element['to'] = array(
    '#title' => t('to'),
    '#default_value' => $to,
    '#suffix' => '</div>',
  ) + $base;

  // Add prefix and suffix.
  if (!empty($instance['settings']['prefix'])) {
    $prefix = field_filter_xss($instance['settings']['prefix']);
    $element['from']['#field_prefix'] = $prefix;
    $element['to']['#field_prefix'] = $prefix;
  }
  if (!empty($instance['settings']['suffix'])) {
    $suffix = field_filter_xss($instance['settings']['suffix']);
    $element['from']['#field_suffix'] = $suffix;
    $element['to']['#field_suffix'] = $suffix;
  }

  $element['#element_validate'][] = 'range_field_widget_validate';

  $element['#attached']['css'][] = drupal_get_path('module', 'range') . '/css/range.admin.css';

  return $element;
}

/**
 * FAPI validation of an individual range element.
 */
function range_field_widget_validate($element, &$form_state) {
  range_field_widget_validate_subelement('from', $element, $form_state);
  range_field_widget_validate_subelement('to', $element, $form_state);
}

/**
 * FAPI validation of a FROM or TO range subelement.
 */
function range_field_widget_validate_subelement($subelement, $element, &$form_state) {
  $field = field_widget_field($element, $form_state);
  $instance = field_widget_instance($element, $form_state);

  $type = $element['#range_type'];

  $element = $element[$subelement];
  $value = $element['#value'];
  // Reject invalid characters.
  if (!empty($value)) {
    switch ($type) {
      case 'float':
      case 'decimal':
        $regexp = '@([^-0-9\\' . $field['settings']['decimal_separator'] . '])|(.-)@';
        $message = t('Only numbers and the decimal separator (@separator) allowed in %field.', array('%field' => $instance['label'], '@separator' => $field['settings']['decimal_separator']));
        break;

      case 'integer':
        $regexp = '@([^-0-9])|(.-)@';
        $message = t('Only numbers are allowed in %field.', array('%field' => $instance['label']));
        break;
    }
    if ($value != preg_replace($regexp, '', $value)) {
      form_error($element, $message);
    }
    else {
      if ($type == 'decimal' || $type == 'float') {
        // Verify that only one decimal separator exists in the field.
        if (substr_count($value, $field['settings']['decimal_separator']) > 1) {
          $message = t('%field: There should only be one decimal separator (@separator).', array(
            '%field' => t($instance['label']),
            '@separator' => $field['settings']['decimal_separator'],
                  )
          );
          form_error($element, $message);
        }
        else {
          // Substitute the decimal separator; things should be fine.
          $value = strtr($value, $field['settings']['decimal_separator'], '.');
        }
      }
      form_set_value($element, $value, $form_state);
    }
  }
}

/**
 * Implements hook_field_widget_error().
 */
function range_field_widget_error($element, $error, $form, &$form_state) {
  form_error($element, $error['message']);
}
