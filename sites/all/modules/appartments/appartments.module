<?php
/**
* @file
* 
*/


/**
* Implements hook_help.
*
* Displays help and module information.
*
* @param path
* Which path of the site we're using to display help
* @param arg
* Array that holds the current path as returned from arg() function
*
*/
function appartments_help($path, $arg) {
  switch ($path) {
    case "admin/help#app4rent":
      return '<p>'. t("this is it") .'</p>';
      break;
  }
}

function appartments_theme_registry_alter(&$theme_registry) {    
	$theme_registry['views_view_field__appartments_waiting_list__page__created'] = array(
      'template' => drupal_get_path('module', 'appartments').'/templates/views-view-field--appartments-waiting-list--page--created',
      'type' => 'module',
    );
	$theme_registry['views_view_field__appartments_waiting_list__page__field_entry_date'] = array(
      'template' => drupal_get_path('module', 'appartments').'/templates/views-view-field--appartments-waiting-list--page--field-entry-date',
      'type' => 'module',
    );
	$theme_registry['views_view_field__appartments_waiting_list__page__field_start_date_test'] = array(
      'template' => drupal_get_path('module', 'appartments').'/templates/views-view-field--appartments-waiting-list--page--field-start-date-test',
      'type' => 'module',
    );        
}
/**
* Implements hook_menu().
*/
function appartments_menu() {
  $items = array();
  $items['appartments/user/register'] = array(
    'title' => t('Registrera ny anvÃ¤ndare'),
    'page callback' => 'appartments_view_register_page',
    'access arguments' => array('administer appartments'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

function appartments_view_register_page () {
	return theme('appartments_node_register');
}

function appartments_theme() {
        $theme = array();
        $theme['appartments_node_register'] = array(
                        'template' => 'templates/appartments-node-register',
                        'arguments' => array(),
        );
        return $theme;
}

function appartments_user_register_form($form, &$form_state){
    $form['name'] = array(
        '#title' => t('Username'),
        '#description' => t('Choose a username'),
        '#type' => 'textfield',
        '#required' => TRUE,
    );
    $form['mail'] = array(
        '#title' => t('Email'),
        '#description' => t('Enter a valid email address'),
        '#type' => 'textfield',
        '#required' => FALSE,
    );
    $form['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Save'),
        '#submit' => array('appartments_user_register_form_submit'),
        '#validate' => array('appartments_user_register_form_validate'),
    );
    return $form;
}

function appartments_user_register_form_validate($form, &$form_state) {
	$u = user_load_by_name($form_state['values']['name']);
	if($u && $u->uid) 
		form_set_error('name', t('A user with specified username already exists'));
	elseif($error_message = user_validate_name($form_state['values']['name'])) 
		form_set_error('name', $error_message);
		
	if(!empty($form_state['values']['mail'])) {
		if(valid_email_address($form_state['values']['mail'])) {
			$u = user_load_by_mail($form_state['values']['mail']);
			if($u && $u->uid) 
				form_set_error('mail', t('A user with specified email address already exists'));
		}
		else
			form_set_error('mail', t('The specified email address is invalid'));
	}
}

function appartments_user_register_form_submit($form, &$form_state) {
	$passwd = user_password();
	$edit = array(
		  'name' => $form_state['values']['name'],
		  'pass' => $passwd,
		  'mail' => $form_state['values']['mail'],
		  'init' => $form_state['values']['mail'] ? $form_state['values']['email'] : $form_state['values']['name'],
		  'status' => 1,
		  'access' => REQUEST_TIME,
	);
	$u = user_save(drupal_anonymous_user(), $edit);
	if($u) {
		drupal_set_message(t('User with username "!name" and password "!passwd" created', array('!name' => $form_state['values']['name'], '!passwd' => $passwd)), 'status');	
		drupal_goto("/profile-residence_search_profile/" . $u->uid . "/edit");	
	}
}

function appartments_preprocess_views_view(&$vars) {
   $view = $vars['view'];
  if($view->name == 'appartments_waiting_list') {
     drupal_add_css(drupal_get_path('module', 'appartments') .'/css/appartments_waiting_list.css');
  }
}

function appartments_views_pre_view(&$view, &$display_id, &$args) {
  
/*   $filters = $view->display_handler->get_option('filters');
   $filters['field_max_room_count_value']['value']['value'] = 4;
   $filters['field_min_room_count_value']['value']['value'] = 4;
   $view->display_handler->override_option('filters', $filters);
   
   if ($view->name === 'profils_k') {
	  if (arg(0) == 'node' && is_numeric(arg(1))) {
		$nid = arg(1);
		$node = node_load($nid);
	  }
	  
     //  $handler = $view->display['default']->handler;
   }*/
}


function appartments_views_query_alter(&$view, &$query) {
	
}

function appartments_permission() {
  return array(
    'administer appartments' => array(
      'title' => t('Administer appartmens module'),
      'description' => t('Permission to administer apparments module.'),
    ),
  );
}


/*
* Implements hook_email_registration_name() from module email_registration
* just use email as username - allways

function appartments_email_registration_name($edit, $account) { 
	return $account->mail; 
}
*/


