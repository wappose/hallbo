<?php
/**
* @file
*
*/


/**
* Implements hook_help.
*
* Displays help and module information.
*
* @param path
* Which path of the site we're using to display help
* @param arg
* Array that holds the current path as returned from arg() function
*
*/
function apartments_help($path, $arg) {
  switch ($path) {
    case "admin/help#apartments":
      return '<p>'. t("this is it") .'</p>';
      break;
  }
}

function apartments_theme_registry_alter(&$theme_registry) {
/*	$theme_registry['views_view_field__page__created'] = array(
      'template' => drupal_get_path('module', 'apartments').'/templates/views-view-field--page--created',
      'type' => 'module',
    );*/
/*	$theme_registry['views_view_field__page__field_entry_date'] = array(
      'template' => drupal_get_path('module', 'apartments').'/templates/views-view-field--page--field-entry-date',
      'type' => 'module',
    );*/
}

/**
* Implements hook_menu().
*/
function apartments_menu() {
  $items = array();

  $items['apartments/user/register'] = array(
    'title' => t('Registrera ny användare'),
    'page callback' => 'apartments_view_register_page',
    'access callback' => 'apartments_user_register_access',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['apartments/user/%user'] = array(
    'title' => t('Visa användare'),
    'page callback' => 'apartments_view_profile_page',
    'page arguments' => array(2),
    'access arguments' => array(2),
    'access callback' =>'apartments_user_edit_access',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['apartments/user/%user/open'] = array(
    'title' => t('Visa användare'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['apartments/user/%user/edit'] = array(
    'title' => t('Redigera användare'),
    'page callback' => 'apartments_view_account_page',
    'page arguments' => array(2),
    'access arguments' => array(2),
    'access callback' =>'apartments_user_edit_access',
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/config/content/apartments'] = array(
    'title' => t('Apartments module'),
    'description' => t('Configuration of the apartments module'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('apartments_settings_form'),
    'access arguments' => array('administer apartments'),
    'type' => MENU_LOCAL_TASK,
  );

/*  $items['apartments/fixstuff'] = array(
    'title' => t('Fixing stuff'),
    'page callback' => 'apartments_fix_function',
    'access arguments' => array('administer apartments'),
    'type' => MENU_LOCAL_TASK,
  );*/

  return $items;
}

function apartments_view_register_page () {
  $form = drupal_get_form("apartments_user_register_form");
	return theme('apartments_node', array('form' => $form));
}

function apartments_view_account_page ($user) {
  drupal_set_title(t('Redigera användare'));
  $form = drupal_get_form("apartments_user_profile_form", $user);
  return theme('apartments_node', array('form' => $form));
}

function apartments_view_profile_page ($account) {
  $apartments_profiles = array();
  $types = profile2_get_types();
  $hidden_profiles = explode(",", variable_get('apartments_hidden_profiles', ''));
  foreach($types as $type) {
    $type_name = $type->type;
    if (strpos($type_name, 'apartments') === 0 && ! in_array($type_name, $hidden_profiles))  {
      $profile = profile2_load_by_user($account, $type_name);
      if (empty($profile))
        $profile = profile2_create(array('type' => $type_name, 'uid' => $accounts->uid));
      $apartments_profiles[] = $profile;
    }
  }
  $data = entity_view('profile2', $apartments_profiles, 'full');
  return theme('apartments_profile', array('data' => $data));
}

function apartments_theme() {
  $theme = array();
  $theme['apartments_node'] = array(
    'template' => 'templates/apartments-node',
    'arguments' => array(),
  );
  $theme['apartments_profile'] = array(
    'template' => 'templates/apartments-profile',
    'arguments' => array(),
  );
  return $theme;
}

function apartments_user_profile_form($form, &$form_state) {
  if(isset($form_state['build_info']['args'][0]))
    $form_state['#user'] = $form_state['build_info']['args'][0];

  $user_path = variable_get('apartments_path_username', '');
  $email_path = variable_get('apartments_path_email', '');
  if(empty($user_path)) {
    $form['name'] = array(
      '#title' => t('Username'),
      '#description' => t('Choose a username'),
      '#type' => 'textfield',
      '#required' => TRUE,
      '#value' => $form_state['#user']->name,
    );
  }
  if(empty($email_path)) {
    $form['mail'] = array(
      '#title' => t('Email'),
      '#description' => t('Enter a valid email address'),
      '#type' => 'textfield',
      '#required' => FALSE,
      '#value' => $form_state['#user']->mail,
    );
  }

  if (empty($form_state['profiles'])) {
    $types = profile2_get_types();
    foreach($types as $type) {
      $type_name = $type->type;
      if (strpos($type_name, 'apartments') === 0) {
        $profile = profile2_load_by_user($form_state['#user'], $type_name);
        if (empty($profile)) {
          $profile = profile2_create(array('type' => $type_name, 'uid' => $form['#user']->uid));
        }
        $form_state['profiles'][$profile->type] = $profile;
      }
    }
  }

  profile2_attach_form($form, $form_state);

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
    '#submit' => array('apartments_user_form_submit_handler', 'profile2_form_submit_handler'),
    '#validate' => array('apartments_user_form_validate_handler', 'profile2_form_validate_handler'),
  );
  return $form;
}

function apartments_user_register_form($form, &$form_state) {
//$admin = user_access('administer_users');
  $user_path = variable_get('apartments_path_username', '');
  $email_path = variable_get('apartments_path_email', '');
  if(empty($user_path)) {
    $form['name'] = array(
      '#title' => t('Username'),
      '#description' => t('Choose a username'),
      '#type' => 'textfield',
      '#required' => TRUE,
    );
  }
  if(empty($email_path)) {
    $form['mail'] = array(
      '#title' => t('Email'),
      '#description' => t('Enter a valid email address'),
      '#type' => 'textfield',
      '#required' => FALSE,
    );
  }

  $types = profile2_get_types();
  foreach($types as $type) {
    $type_name = $type->type;
    if (strpos($type_name, 'apartments') === 0 && empty($form_state['profiles'][$type_name])) {
      $form_state['profiles'][$type_name] = profile2_create(array('type' => $type_name));
    }
  }
  profile2_attach_form($form, $form_state);

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
    '#submit' => array('apartments_user_form_submit_handler', 'profile2_form_submit_handler'),
    '#validate' => array('apartments_user_form_validate_handler', 'profile2_form_validate_handler'),
  );
  return $form;
}

function apartments_user_form_validate_handler($form, &$form_state) {
  $values = empty($form_state['input']) ? $form_state['values'] : $form_state['input'];
  $user_path = variable_get('apartments_path_username', '');
  list($username, $user_field, $user_profile)  = _apartments_get_data_from_form($values, $user_path, $values['name']);

  $email_path = variable_get('apartments_path_email', '');
  list($email, $email_field, $email_profile)  = _apartments_get_data_from_form($values, $email_path, $values['mail']);

 	if(empty($form_state['#user'])) {
    if($error_message = user_validate_name($username))
      form_set_error($user_field ? $user_field : 'name', $error_message);
    $u = user_load_by_name($username);
  }

  //TODO: make form set error mark profile2 fields in case of an error.
	if($u && $u->uid)
		form_set_error($user_field ? $user_field : 'name', t('User "!name" already exists', array('!name' => $username)));
	elseif(!empty($form_state['#user']) && $username && $error_message = user_validate_name($username))
		form_set_error($user_field ? $user_field : 'name', $error_message);

  if(!empty($email)) {
		if(valid_email_address($email)) {
      if(empty($form_state['#user']) || $form_state['#user']->mail != $email) {
			  $u = user_load_by_mail($email);
			  if($u && $u->uid)
				  form_set_error($email_field ? $email_field : 'mail', t('A user with specified email address already exists'));
      }
		}
		else
			form_set_error($email_field ? $email_field : 'mail', t('The specified email address is invalid'));
	}
}

function apartments_user_form_submit_handler($form, &$form_state) {
  $values = empty($form_state['input']) ? $form_state['values'] : $form_state['input'];

  $user_path = variable_get('apartments_path_username', '');
  list($username, $user_field, $user_profile)  = _apartments_get_data_from_form($values, $user_path, $values['name']);

  $email_path = variable_get('apartments_path_email', '');
  list($email, $email_field, $email_profile)  = _apartments_get_data_from_form($values, $email_path, $values['mail']);

  $register = false;
  if(empty($form_state['#user'])) {
    $register = true;
    $passwd = user_password();
  	$edit = array(
  		  'name' => $username,
  		  'pass' => $passwd,
  		  'mail' => $email,
  		  'init' => $email ? $email : $username,
  		  'status' => 1,
  		  'access' => REQUEST_TIME,
  	);
    $uu = drupal_anonymous_user();
    $u = user_save($uu, $edit);

    /* if user is anonymous .. then login */
    $login_after_registration = variable_get('apartments_login_after_register', false);
    if(user_is_anonymous() && $login_after_registration) {
      global $user;
      $user = user_load($u->uid);
      $login_array = array ('name' => $username);
      user_login_finalize($login_array);
    }
  }
  else {
    $form_state['#user']->mail = $email;
    $edit = array(
      'status' => 1,
      'access' => REQUEST_TIME,
    );
    if($username) {
      $u2 = user_load_by_name($username);
      if($u2->uid != $form_state['#user']->uid )
        drupal_set_message(t('Username "!name" is already taken by another user. Login name is "!oldname"', array('!name' => $username, '!oldname' => $form_state['#user']->name)), 'error');
      else
        $edit['name'] = $username;
    }
    if($email)
      $edit['mail'] = $email;
    $u = user_save($form_state['#user'], $edit);
  }

  //Not sure but this is overcompensating for profile2 that uses #user without hash (bug?)
  $form_state['user'] = $form_state['#user'] = $u;

	if($u) {
    if($register) {
      if(user_access('administer apartments module'))
    		drupal_set_message(t('User with username "!name" and password "!passwd" created', array('!name' => $form_state['#user']->name, '!passwd' => $passwd)), 'status');
      rules_invoke_event('apartments_user_register', $u, $passwd);
    }
    else {
      drupal_set_message(t('User with username "!name" has been updated', array('!name' => $form_state['#user']->name)), 'status');
      rules_invoke_event('apartments_user_edit', $u);
    }
	}
  else {
    drupal_set_message(t('User with username "!name" could not be saved', array('!name' => $form_state['#user']->name)), 'error');
  }
}

function apartments_preprocess_page(&$vars, $hook) {
  drupal_add_css(drupal_get_path('module', 'apartments') .'/css/apartments_waiting_list.css');
}

function apartments_views_pre_view(&$view, &$display_id, &$args) {

}

function apartments_views_query_alter(&$view, &$query) {
	if ($view->name === 'apartments_queue' && arg(0) == 'node' && is_numeric(arg(1))) {
    $current_node = node_load(arg(1));

    $filters = $view->display_handler->get_option('filters');
    $filters['field_rooms_requested_value']['value'] = 4;
    $view->display_handler->override_option('filters', $filters);

/*    if (arg(0) == 'node' && is_numeric(arg(1))) {
    $nid = arg(1);
    $node = node_load($nid);
    }*/

     //  $handler = $view->display['default']->handler;
  }
  elseif($view->name == 'apartments_queue_position' && $view->current_display == 'queuepos' && arg(1) == 'user' && is_numeric(arg(2))) {
    /*Ladda användare och ställ*/
    $uu = user_load(arg(2));
    if($uu) {
      if($p = profile2_load_by_user($uu, 'apartments_search_profile')) {
        $pwrapper = entity_metadata_wrapper('profile2', $p);
        $entry_date = $pwrapper->field_entry_date->value();
        $query->where[1]['conditions'][1] = array( 'field' => 'profile_users__field_data_field_entry_date.field_entry_date_value', 'value' => $entry_date, 'operator' => '<=' );
      }
    }
  }
}

function apartments_permission() {
  return array(
    'administer apartments' => array(
      'title' => t('Administer apartmens module'),
      'description' => t('Permission to administer apartments module.') . ' ' . t('Warning: Give to trusted roles only; this permission has security implications.'),
    ),
    'apartments create new account' => array(
      'title' => t('Create a new account'),
      'description' => t('Permission to create new user accounts/queue members.'),
    ),
    'apartments edit any account' => array(
      'title' => t('Edit any account'),
      'description' => t('Permission to edit any user account/queue member.'),
    ),
    'apartments edit own account' => array(
      'title' => t('Edit own account'),
      'description' => t('Permission to edit own user account/queue member.'),
    ),
  );
}

function apartments_user_register_access() {
  return (user_is_anonymous() && user_access('apartments create new account')) || user_access('administer apartments');
}
function apartments_user_edit_access($account) {
  global $user;
  return (!user_is_anonymous() &&
          ((user_access('apartments edit own account') && $user->uid == $account->uid) || user_access('apartments edit any account'))) ||
        user_access('administer apartments');
}

/**
* Implementation of hook_rules_event_info().
* @ingroup rules
*/
function apartments_rules_event_info() {
  return array(
    'apartments_user_edit' => array(
      'label' => t('A user is updated using apartments module'),
      'group' => 'Apartments',
      'variables' => array(
        'the_user' => array('type' => 'user',
          'label' => t('The newly updated user object'),
          'description' => t('This is the userobject thats just been edited using the apartments module')
        ),
      ),
    ),
    'apartments_user_register' => array(
      'label' => t('A user is registered using apartments module'),
      'group' => 'Apartments',
      'variables' => array(
        'the_user' => array('type' => 'user',
          'label' => t('The newly registered user object'),
          'description' => t('This is the userobject thats just been added using the apartments module')
        ),
        'user_password' => array('type' => 'text',
          'label' => t('The password of the newly created user object'),
          'description' => t('This is the password (in clear text) of the userobject thats just been added using the apartments module')
        ),
      ),
    ),
  );
}

function apartments_rules_action_info() {
  return array(
    'apartments_rules_action_send_apartment_invitation' => array(
      'label' => t('Send apartment invitation'),
      'group' => 'Apartments',
      'named parameter' => FALSE,
      'parameter' => array(
        'user' => array(
          'type' => 'user',
          'label' => t('Receiver user object'),
          'description' => t('User object to send the invitation to'),
          ),
        'subject' => array(
          'type' => 'text',
          'label' => t('Subject'),
          'description' => t('The subject (or title) of the invitation'),
          ),
        'body' => array(
          'type' => 'text',
          'label' => t('Body'),
          'description' => t('The apartment node to include in the invitation'),
          ),
        'node' => array(
          'type' => 'node',
          'label' => t('Apartment node'),
          'description' => t('The apartment node to include in the invitation'),
          ),
        ),
      ),
    );
}

function apartments_rules_action_send_apartment_invitation($receiver, $subject, $body, $node) {
  drupal_set_message($receiver->name . ' ' .$subject . ' ' . $body . ' ' . $node->title, 'status');

}

/*
* Implements hook_email_registration_name() from module email_registration
* just use email as username - allways

function apartments_email_registration_name($edit, $account) {
	return $account->mail;
}
*/

/**
 * Implements hook_field_formatter_info().
 */
function apartments_field_formatter_info() {
  $formatters = array(
    'apartments_queue_points' => array(
      'label' => t('Queue points'),
      'description' => t('Queue points based on date of entry, one point per day'),
      'field types' => array('date', 'datestamp', 'datetime'),
    ),
  );
  return $formatters;
}

/**
 * Implements hook_field_formatter_view().
 */
function apartments_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $elements = array();
  switch ($display['type']) {
    case 'apartments_queue_points':
      foreach ($items as $delta => $item) {
        $elements[$delta] = array(
          '#markup' => floor((time() - $item['value']) / (3600*24)),
        );
      }
      break;
  }
  return $elements;
}


/**
* Form function, called by drupal_get_form()
* in nfportal_menu().
*/
function apartments_settings_form($form, &$form_state) {
    $form['apartments_path_username'] = array(
        '#type' => 'textfield',
        '#title' => t('Path to username in profile2'),
        '#default_value' => variable_get('apartments_path_username', ''),
        '#description' => t('Enter path (profilename/fieldname) to a field in profiles2 where username is given. If none supplied the user will be prompted to enter a username.'),
        '#required' => FALSE,
    );
    $form['apartments_path_email'] = array(
        '#type' => 'textfield',
        '#title' => t('Path to users email in profile2'),
        '#default_value' => variable_get('apartments_path_email', ''),
        '#description' => t('Enter path to a field in profiles2 where email is given. If none supplied the user will be prompted to enter an email (not required)'),
        '#required' => FALSE,
    );
    $form['apartments_hidden_profiles'] = array(
        '#type' => 'textfield',
        '#title' => t('Hidden apartments profiles on users profile page'),
        '#default_value' => variable_get('apartments_hidden_profiles', ''),
        '#description' => t('Enter key-names of all profiles you dont want to show on the users apartments profile page, comma separated'),
        '#required' => FALSE,
    );
    $form['apartments_login_after_register'] = array(
        '#type' => 'checkbox',
        '#title' => t('Login user after registration'),
        '#default_value' => variable_get('apartments_login_after_register', false),
        '#description' => t('Check this if you want the user to automatically be logged in after registration.'),
        '#required' => FALSE,
    );
    return system_settings_form($form);
}


function apartments_views_data() {
  $data['apartments_invites']['table']['group'] = t('Apartments table');
  $data['apartments_invites']['table']['base'] = array(
    'field' => array('uid', 'nid'), // This is the identifier field for the view.
    'title' => t('Apartents invites table'),
    'help' => t('The invites table connects users to apartmets.'),
    'weight' => -10,
  );
  $data['apartments_invites']['table']['join'] = array(
    'users' => array(
    'left_field' => 'uid',
    'field' => 'uid',
    ),
  );

  // User ID table field.
  $data['apartments_invites']['uid'] = array(
    'title' => t('User ID'),
    'help' => t('Reference to user node.'),

    'relationship' => array(
      'base' => 'users', // The name of the table to join with.
      'base field' => 'uid', // The name of the field on the joined table.
      // 'field' => 'nid' -- see hook_views_data_alter(); not needed here.
      'handler' => 'views_handler_relationship',
      'label' => t('User ID'),
      'title' => t('User reference'),
      'help' => t('This field is part of the primary key'),
    ),
    'field' => array(
      'handler' => 'views_handler_field_numeric',
      'click sortable' => TRUE,
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_numeric',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
  );

  // Node ID table field.
  $data['apartments_invites']['nid'] = array(
    'title' => t('Node ID'),
    'help' => t('Reference to apartment node.'),
    'relationship' => array(
      'base' => 'node', // The name of the table to join with.
      'base field' => 'nid', // The name of the field on the joined table.
      // 'field' => 'nid' -- see hook_views_data_alter(); not needed here.
      'handler' => 'views_handler_relationship',
      'label' => t('Node ID'),
      'title' => t('Node reference to apartment node'),
      'help' => t('This field is part of the primary key'),
    ),
    'field' => array(
      'handler' => 'views_handler_field_numeric',
      'click sortable' => TRUE,
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_numeric',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
  );

  // Invitedate timestamp field.
  $data['apartments_invites']['invite_date'] = array(
    'title' => t('Invitedate'),
    'help' => t('A timestamp field.'),
    'field' => array(
      'handler' => 'views_handler_field_date',
      'click sortable' => TRUE,
    ),
    'sort' => array(
      'handler' => 'views_handler_sort_date',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_date',
    ),
  );

  // Boolean field.
  $data['apartments_invites']['visited'] = array(
    'title' => t('Visited'),
    'help' => t('True if user visited apartment node.'),
    'field' => array(
      'handler' => 'views_handler_field_boolean',
      'click sortable' => TRUE,
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_boolean_operator',
       // Note that you can override the field-wide label:
      'label' => t('Is sigle'),
       // This setting is used by the boolean filter handler, as possible option.
      'type' => 'yes-no',
        // use boolean_field = 1 instead of boolean_field <> 0 in WHERE statment.
      'use equal' => TRUE,
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
  );

  // Boolean field.
  $data['apartments_invites']['interest'] = array(
    'title' => t('Interest'),
    'help' => t('True if user interest apartment node.'),
    'field' => array(
      'handler' => 'views_handler_field_boolean',
      'click sortable' => TRUE,
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_boolean_operator',
       // Note that you can override the field-wide label:
      'label' => t('Is sigle'),
       // This setting is used by the boolean filter handler, as possible option.
      'type' => 'yes-no',
        // use boolean_field = 1 instead of boolean_field <> 0 in WHERE statment.
      'use equal' => TRUE,
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
  );
  return $data;
}


function apartments_fix_function () {
  $q = db_query("select uid from users");
  foreach ($q as $u) {
    $uu = user_load($u->uid);
    if($uu) {
      if($p = profile2_load_by_user($u, 'apartments_personal_information')) {
        $i++;
        $pwrapper = entity_metadata_wrapper('profile2', $p);
        $pwrapper->field_person_no->set($pwrapper->field_pno->value());
        $pwrapper->field_coapplicant_person_no->set($pwrapper->field_coapplicant_pno->value());
        $pwrapper->save();
      }
    }
  }


/*  $fp = fopen("/home/joos/Dokument/hallbo-import.csv", "r");
  $first = true;
  $i =0;
  while (($row  = fgetcsv($fp))!==FALSE) {
    if($first) {
      $first = false;
      continue;
    }
    $time = strtotime($row[0]);
    if($u = user_load_by_name($row[7])) {
      if($p = profile2_load_by_user($u, 'apartments_search_profile')) {
        $i++;
        $pwrapper = entity_metadata_wrapper('profile2', $p);
        $pwrapper->field_entry_date->set($time);
        $pwrapper->save();
      }
    }
  } */
  echo $i;

}


function _apartments_get_data_from_form($values, $field_path, $default) {
  $field = $profile = null;
  if($field_path) {
    list($profile, $field) = explode("/", $field_path);
    $profile = "profile_" . $profile;
    if(!empty($profile) && !empty($field) && array_key_exists($profile, $values) && array_key_exists($field, $values[$profile])) {
      $ret = $values[$profile][$field];
      while(is_array($ret)) //damn ugly way to fetch a field value from an entity...
        $ret = array_pop($ret);
    }
    else
      $ret = $default;
  }
  else
    $ret = $default;
  return array($ret, $field, $profile);
}




