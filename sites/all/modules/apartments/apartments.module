<?php
/**
* @file
* 
*/


/**
* Implements hook_help.
*
* Displays help and module information.
*
* @param path
* Which path of the site we're using to display help
* @param arg
* Array that holds the current path as returned from arg() function
* 
*/
function apartments_help($path, $arg) {
  switch ($path) {
    case "admin/help#apartments":
      return '<p>'. t("this is it") .'</p>';
      break;
  }
}

function apartments_theme_registry_alter(&$theme_registry) {    
/*	$theme_registry['views_view_field__page__created'] = array(
      'template' => drupal_get_path('module', 'apartments').'/templates/views-view-field--page--created',
      'type' => 'module',
    );*/
/*	$theme_registry['views_view_field__page__field_entry_date'] = array(
      'template' => drupal_get_path('module', 'apartments').'/templates/views-view-field--page--field-entry-date',
      'type' => 'module',
    );*/
}

/**
* Implements hook_menu().
*/
function apartments_menu() {
  $items = array();

  $items['apartments/user/register'] = array(
    'title' => t('Registrera ny anvÃ¤ndare'),
    'page callback' => 'apartments_view_register_page',
    'access callback' => 'apartments_user_register_access',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['apartments/user/%/edit'] = array(
    'title' => t('Redigera anvÃ¤ndare'),
    'page callback' => 'apartments_view_account_page',
    'page arguments' => array(2),
    'access arguments' => array(2),
    'access callback' =>'apartments_user_edit_access',
    'type' => MENU_NORMAL_ITEM,
  ); 
  $items['apartments/user/fix'] = array(
    'title' => t('Fixing stuff'),
    'page callback' => 'apartments_fix_function',
    'access arguments' => array('administer apartments'),
    'type' => MENU_LOCAL_TASK,
  );
  return $items;
}

function apartments_view_register_page () {
  $form = drupal_get_form("apartments_user_register_form");

	return theme('apartments_node', array('form' => $form));
}
function apartments_view_account_page ($uid) {
  $user = user_load($uid);
  $form = drupal_get_form("apartments_user_profile_form", $user);
	return theme('apartments_node', array('form' => $form));
}

function apartments_theme() {
        $theme = array();
        $theme['apartments_node'] = array(
                        'template' => 'templates/apartments-node',
                        'arguments' => array(),
        );
        return $theme;
}

function apartments_user_profile_form($form, &$form_state) {
  if(isset($form_state['build_info']['args'][0])) 
    $form_state['#user'] = $form_state['build_info']['args'][0];

  $form['name'] = array(
    '#title' => t('Username'),
    '#description' => t('Choose a username'),
    '#type' => 'textfield',
    '#required' => TRUE,
    '#value' => $form_state['#user']->name,
  );
  $form['mail'] = array(
    '#title' => t('Email'),
    '#description' => t('Enter a valid email address'),
    '#type' => 'textfield',
    '#required' => FALSE,
    '#value' => $form_state['#user']->mail,
  ); 
  
  if (empty($form_state['profiles'])) {
    $types = profile2_get_types();
    foreach($types as $type) {
      $type_name = $type->type;
      if (strpos($type_name, 'apartments') === 0) {
        $profile = profile2_load_by_user($form_state['#user'], $type_name);
        if (empty($profile)) {
          $profile = profile2_create(array('type' => $type_name, 'uid' => $form['#user']->uid));
        }
        $form_state['profiles'][$profile->type] = $profile;        
      }
    }
  }

  profile2_attach_form($form, $form_state);

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
    '#submit' => array('apartments_user_form_submit_handler', 'profile2_form_submit_handler'),
    '#validate' => array('apartments_user_form_validate_handler', 'profile2_form_validate_handler'),
  );  
  return $form;
}

function apartments_user_register_form($form, &$form_state) {
//$admin = user_access('administer_users');
  
  $form['name'] = array(
    '#title' => t('Username'),
    '#description' => t('Choose a username'),
    '#type' => 'textfield',
    '#required' => TRUE,
  );
  $form['mail'] = array(
    '#title' => t('Email'),
    '#description' => t('Enter a valid email address'),
    '#type' => 'textfield',
    '#required' => FALSE,
  ); 

  $types = profile2_get_types();
  foreach($types as $type) {
    $type_name = $type->type;
    if (strpos($type_name, 'apartments') === 0 && empty($form_state['profiles'][$type_name])) {
      $form_state['profiles'][$type_name] = profile2_create(array('type' => $type_name));
    }
  }
  profile2_attach_form($form, $form_state);

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
    '#submit' => array('apartments_user_form_submit_handler', 'profile2_form_submit_handler'),
    '#validate' => array('apartments_user_form_validate_handler', 'profile2_form_validate_handler'),
  );
  return $form;
}

function apartments_user_form_validate_handler($form, &$form_state) {
  $values = empty($form_state['input']) ? $form_state['values'] : $form_state['input'];
 	if(empty($form_state['#user']))
    $u = user_load_by_name($values['name']);
  
  //print_r($form_state['values']);
	if($u && $u->uid) 
		form_set_error('name', t('A user with specified username already exists'));
	elseif($error_message = user_validate_name($values['name'])) 
		form_set_error('name', $error_message);

	if(!empty($values['mail'])) {
		if(valid_email_address($values['mail'])) {
      if(empty($form_state['#user']) || $form_state['#user']->mail != $values['mail']) {
			  $u = user_load_by_mail($values['mail']);
			  if($u && $u->uid) 
				  form_set_error('mail', t('A user with specified email address already exists'));
      }
		}
		else
			form_set_error('mail', t('The specified email address is invalid'));
	}
}

function apartments_user_form_submit_handler($form, &$form_state) {
  $values = empty($form_state['input']) ? $form_state['values'] : $form_state['input'];
  $register = false;
  if(empty($form_state['#user'])) {
    $register = true;
    $passwd = user_password();
  	$edit = array(
  		  'name' => $values['name'],
  		  'pass' => $passwd,
  		  'mail' => $values['mail'],
  		  'init' => $values['mail'] ? $values['email'] : $values['name'],
  		  'status' => 1,
  		  'access' => REQUEST_TIME,
  	);
    $uu = drupal_anonymous_user();
    $u = user_save($uu, $edit);

    /* if user is anonymous .. then login */
    if(user_is_anonymous()) {
      
      global $user;
      $user = user_load($u->uid);
      $login_array = array ('name' => $values['name']);
      user_login_finalize($login_array);
    }
  }
  else {
    $form_state['#user']->mail = $values['mail'];
    $edit = array(
      'name' => $values['name'],
      'mail' => $values['mail'],
      'status' => 1,
      'access' => REQUEST_TIME,
    );
    $u = user_save($form_state['#user'], $edit);
  }
  
  //Not sure but this is overcompensating for profile2 that uses #user without hash (bug?)
  $form_state['user'] = $form_state['#user'] = $u;
  
	if($u) {
    if($register) {
      if(user_access('administer apartments module'))
    		drupal_set_message(t('User with username "!name" and password "!passwd" created', array('!name' => $values['name'], '!passwd' => $passwd)), 'status');	
      rules_invoke_event('apartments_user_register', $u, $passwd);
    }
    else {
      drupal_set_message(t('User with username "!name" has been updated', array('!name' => $values['name'])), 'status');  
      rules_invoke_event('apartments_user_edit', $u);
    }
	}
  else {
    drupal_set_message(t('User with username "!name" could not be saved', array('!name' => $values['name'])), 'error');
  }
}

function apartments_preprocess_page(&$vars, $hook) {
  drupal_add_css(drupal_get_path('module', 'apartments') .'/css/apartments_waiting_list.css');
}

function apartments_views_pre_view(&$view, &$display_id, &$args) {
  
/*   $filters = $view->display_handler->get_option('filters');
   $filters['field_max_room_count_value']['value']['value'] = 4;
   $filters['field_min_room_count_value']['value']['value'] = 4;
   $view->display_handler->override_option('filters', $filters);
   
   if ($view->name === 'profils_k') {
	  if (arg(0) == 'node' && is_numeric(arg(1))) {
		$nid = arg(1);
		$node = node_load($nid);
	  }
	  
     //  $handler = $view->display['default']->handler;
   }*/
}


function apartments_views_query_alter(&$view, &$query) {
	
}

function apartments_permission() {
  return array(
    'administer apartments' => array(
      'title' => t('Administer apartmens module'),
      'description' => t('Permission to administer apartments module.') . ' ' . t('Warning: Give to trusted roles only; this permission has security implications.'),
    ),
    'apartments create new account' => array(
      'title' => t('Create a new account'),
      'description' => t('Permission to create new user accounts/queue members.'),
    ),
    'apartments edit any account' => array(
      'title' => t('Edit any account'),
      'description' => t('Permission to edit any user account/queue member.'),
    ),
    'apartments edit own account' => array(
      'title' => t('Edit own account'),
      'description' => t('Permission to edit own user account/queue member.'),
    ),
  );
}

function apartments_user_register_access() {
  return (user_is_anonymous() && user_access('apartments create new account')) || user_access('administer apartments');
}
function apartments_user_edit_access($uid) {
  global $user;
  return (!user_is_anonymous() && 
          ((user_access('apartments edit own account') && $user->uid == $uid) || user_access('apartments edit any account'))) || 
        user_access('administer apartments');
}

/**
* Implementation of hook_rules_event_info().
* @ingroup rules
*/
function apartments_rules_event_info() {
  return array(
    'apartments_user_edit' => array(
      'label' => t('A user is updated using apartments module'),
      'group' => 'Apartments',
      'variables' => array(
        'the_user' => array('type' => 'user', 
          'label' => t('The newly updated user object'),
          'description' => t('This is the userobject thats just been edited using the apartments module')
        ),
      ),
    ),
    'apartments_user_register' => array(
      'label' => t('A user is registered using apartments module'),
      'group' => 'Apartments',
      'variables' => array(
        'the_user' => array('type' => 'user', 
          'label' => t('The newly registered user object'),
          'description' => t('This is the userobject thats just been added using the apartments module')
        ),
        'user_password' => array('type' => 'text', 
          'label' => t('The password of the newly created user object'),
          'description' => t('This is the password (in clear text) of the userobject thats just been added using the apartments module')
        ),
      ),
    ),
  );
}

function apartments_rules_action_info() {
  return array(
    'apartments_rules_action_send_apartment_invitation' => array(
      'label' => t('Send apartment invitation'),
      'group' => 'Apartments',
      'named parameter' => FALSE, 
      'parameter' => array(
        'user' => array(
          'type' => 'user',
          'label' => t('Receiver user object'),
          'description' => t('User object to send the invitation to'),
          ),
        'subject' => array(
          'type' => 'text',
          'label' => t('Subject'),
          'description' => t('The subject (or title) of the invitation'),
          ),
        'body' => array(
          'type' => 'text',
          'label' => t('Body'),
          'description' => t('The apartment node to include in the invitation'),
          ),        
        'node' => array(
          'type' => 'node',
          'label' => t('Apartment node'),
          'description' => t('The apartment node to include in the invitation'),
          ),
        ),
      ),
    );
}

function apartments_rules_action_send_apartment_invitation($receiver, $subject, $body, $node) {
  drupal_set_message($receiver->name . ' ' .$subject . ' ' . $body . ' ' . $node->title, 'status'); 
  
}

/*
* Implements hook_email_registration_name() from module email_registration
* just use email as username - allways

function apartments_email_registration_name($edit, $account) { 
	return $account->mail; 
}
*/

/**
 * Implements hook_field_formatter_info().
 */
function apartments_field_formatter_info() {
  $formatters = array(
    'apartments_queue_points' => array(
      'label' => t('Queue points'),
      'description' => t('Queue points based on date of entry, one point per day'),
      'field types' => array('date', 'datestamp', 'datetime'),
    ),
  );
  return $formatters;
}

/**
 * Implements hook_field_formatter_view().
 */
function apartments_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $elements = array();
  switch ($display['type']) {
    case 'apartments_queue_points':
      foreach ($items as $delta => $item) {
        $elements[$delta] = array(
          '#markup' => floor((time() - $item['value']) / (3600*24)),
        );
      }
      break;
  }
  return $elements;  
}

function apartments_fix_function () {
  $fp = fopen("/home/joos/Dokument/hallbo-import.csv", "r");
  $first = true;
  $i =0;
  while (($row  = fgetcsv($fp))!==FALSE) {
    if($first) {
      $first = false;
      continue;
    }
    $time = strtotime($row[0]);
    if($u = user_load_by_name($row[7])) {
      if($p = profile2_load_by_user($u, 'apartments_search_profile')) {
        $i++;
        $pwrapper = entity_metadata_wrapper('profile2', $p);
        $pwrapper->field_entry_date->set($time);
        $pwrapper->save();
      }
    }
  }
  echo $i;
}